// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	actions "github.com/kyma-incubator/reconciler/pkg/reconciler/instances/istio/actions"

	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// bootstrapIstioPerformer is an autogenerated mock type for the bootstrapIstioPerformer type
type bootstrapIstioPerformer struct {
	mock.Mock
}

// Execute provides a mock function with given fields: logger
func (_m *bootstrapIstioPerformer) Execute(logger *zap.SugaredLogger) (actions.IstioPerformer, error) {
	ret := _m.Called(logger)

	var r0 actions.IstioPerformer
	if rf, ok := ret.Get(0).(func(*zap.SugaredLogger) actions.IstioPerformer); ok {
		r0 = rf(logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(actions.IstioPerformer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*zap.SugaredLogger) error); ok {
		r1 = rf(logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewBootstrapIstioPerformer interface {
	mock.TestingT
	Cleanup(func())
}

// newBootstrapIstioPerformer creates a new instance of bootstrapIstioPerformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newBootstrapIstioPerformer(t mockConstructorTestingTnewBootstrapIstioPerformer) *bootstrapIstioPerformer {
	mock := &bootstrapIstioPerformer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
